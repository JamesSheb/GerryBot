import os

import telebot
from telebot import types
from loguru import logger


from gerry_bot_config import BOT_TOKEN
from password_generator import AutomaticPasswordGeneration, \
    CustomGenerationPassword


logger.add('logs/bot.log',
           format="{time:YYYY-MM-DD at HH:mm:ss} {file} (line - {line})  {level}  {message} <- {function} ",
           level='DEBUG',
           rotation='1 week',
           retention=4,
           compression='zip')

# TODO: –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª README
# TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥–∏—Ç–∏–≥–Ω–æ—Ä —Ñ–∞–π–ª—ã:
#     - env
#     - –ø–∞–ø–∫—É –≤—Å—é —Å –ª–æ–≥–∞–º–∏

bot = None
try:
    bot = telebot.TeleBot(token=BOT_TOKEN)
except Exception as bot_error:
    logger.exception(bot_error)


@logger.catch
@bot.message_handler(commands=['start'])
def start_message(message: types.Message) -> None:
    """–ù–∞—á–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    hello_messages = 'Hello, {0}\n–ú–µ–Ω—è –∑–æ–≤—É—Ç Gerry Password.\n\n' \
                     '–Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –ø–∞—Ä–æ–ª—å!\n' \
                     '–í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ.'.format(
                        message.from_user.first_name)
    buttons_message = '–í—ã–±–µ—Ä–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π'
    try:
        path_to_sticker = os.path.abspath(
            os.path.join('', 'static/stickers/HelloAnimatedSticker.tgs'))
        sticker = open(path_to_sticker, mode='rb')
    except FileNotFoundError:
        sticker = 'üëã'

    markup = types.InlineKeyboardMarkup()
    automatic_selection = types.InlineKeyboardButton(
                                                '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π',
                                                callback_data='auto_gen')
    custom_selection = types.InlineKeyboardButton(
                                                '–ö–∞—Å—Ç–æ–º–Ω—ã–π',
                                                callback_data='custom_gen')
    markup.add(automatic_selection, custom_selection)

    try:
        bot.send_sticker(message.chat.id, sticker)
    except Exception as error_message:
        logger.exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ "hello" - {0}'.format(
                                                                error_message))
        bot.send_message(message.chat.id, sticker)
    bot.send_message(message.chat.id, hello_messages)
    bot.send_message(message.chat.id, buttons_message, reply_markup=markup)


@logger.catch
@bot.callback_query_handler(func=lambda call: call.data == 'auto_gen')
def callback_automatic_password_generation(call: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è."""
    logger.debug('–í—ã–±—Ä–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    password = None
    if call.data == 'auto_gen':
        generation = AutomaticPasswordGeneration(auto_gen=True)
        password = generation.generate_password()

    markup = user_password_answer_buttons(automatic_selection=True)

    # –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text='–í–∞—à –ø–∞—Ä–æ–ª—å:\n\n{0}'.format(password),
                          reply_markup=markup)


@logger.catch
@bot.callback_query_handler(func=lambda call: call.data == 'custom_gen')
def callback_custom_password_generation(call: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è."""
    logger.debug('–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    if call.data == 'custom_gen':
        chat_message = bot.send_message(
            chat_id=call.message.chat.id,
            text='–í–≤–µ–¥–∏—Ç–µ –≤–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –æ—Ç 8 –¥–æ 32 '
                 '(–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).')
        bot.register_next_step_handler(chat_message,
                                       password_length_from_user)


@logger.catch
def password_length_from_user(message: types.Message) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—â—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è."""
    password_length = None
    try:
        password_length = int(message.text)
    except ValueError as error_message:
        logger.exception('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {0}'.format(
                                                                error_message))
        chat_message = bot.send_message(
                                message.chat.id,
                                '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–∏—Ñ—Ä–∞–º–∏.')
        bot.register_next_step_handler(chat_message, password_length_from_user)

    if password_length:
        chat_message = bot.send_message(
            chat_id=message.chat.id,
            text='–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é'
                 ' –æ–±—â—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è.\n'
                 '–ù–∞–ø—Ä–∏–º–µ—Ä - (–ª—é–±–∏–º—ã–π –±—Ä–µ–Ω–¥ –∏–ª–∏ –º–∞—Ä–∫–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ)\n\n'
                 '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏/–∏–ª–∏ —Ü–∏—Ñ—Ä—ã.'
        )
        bot.register_next_step_handler(chat_message,
                                       generate_custom_password_for_user,
                                       password_length)


@logger.catch
def generate_custom_password_for_user(message: types.Message,
                                      password_length: int) -> None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message: class Message.
        password_length (int): –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_password_length = password_length
    user_sequence = message.text
    ready_password = None

    logger.info(
        '–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ - "{0}", –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å - "{1}"'
        ' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'.format(user_password_length, user_sequence))
    generation = CustomGenerationPassword(
        password_length=user_password_length,
        user_sequence=user_sequence
    )
    try:
        ready_password = generation.generate_password()
    except ValueError as error_message:
        logger.warning('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {0}'.format(
                                                                error_message))
        markup = types.InlineKeyboardMarkup()
        custom_selection = types.InlineKeyboardButton(
                                                '–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ',
                                                callback_data='custom_gen')
        markup.add(custom_selection)

        bot.send_message(message.chat.id, str(error_message),
                         reply_markup=markup)

    if ready_password:
        markup = user_password_answer_buttons(custom_selection=True)

        bot.send_message(message.chat.id,
                         text='–í–∞—à –ø–∞—Ä–æ–ª—å:\n\n{0}'.format(ready_password),
                         reply_markup=markup)


@logger.catch
def user_password_answer_buttons(
        automatic_selection: bool = False,
        custom_selection: bool = False) -> 'types.InlineKeyboardMarkup':
    """
    –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏: 'OK' –∏ '–ü–æ–≤—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'.
    –ö–Ω–æ–ø–∫–∞ '–ü–æ–≤—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏':
        –º–µ–Ω—è–µ—Ç—Å—è callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞:
        auto = True –∏–ª–∏ custom = True

    Args:
        automatic_selection (bool) = False: –ï—Å–ª–∏ = True —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
            –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è.
        custom_selection (bool) = False: –ï—Å–ª–∏ = True —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
            –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è.

    Returns:
         –ö–ª–∞—Å—Å 'InlineKeyboardMarkup' —Å 2-–º—è –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    markup = types.InlineKeyboardMarkup()
    ok_selection = types.InlineKeyboardButton('OK!',
                                              callback_data='ok_selection')
    repeat_automatic_selection = types.InlineKeyboardButton(
                                        '–ü–æ–≤—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                                        callback_data='auto_gen')
    repeat_custom_selection = types.InlineKeyboardButton(
                                        '–ü–æ–≤—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                                        callback_data='custom_gen')
    if automatic_selection:
        markup.add(ok_selection, repeat_automatic_selection)
    elif custom_selection:
        markup.add(ok_selection, repeat_custom_selection)
    return markup


@logger.catch
@bot.callback_query_handler(func=lambda call: call.data == 'ok_selection')
def callback_user_decision_is_ok(call: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫—É == ok_selection."""
    if call.data == 'ok_selection':
        ok_message = '*{0}*\n\n–ö–ª–∞—Å—Å–Ω—ã–π –≤—ã–±–æ—Ä!'.format(call.message.text)
        try:
            path_to_sticker = os.path.abspath(
                os.path.join(
                    '', 'static/stickers/EndAnimatedSticker.tgs'))
            sticker = open(path_to_sticker, mode='rb')
        except FileNotFoundError:
            sticker = 'üòé'
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=ok_message,
                              reply_markup=None,
                              parse_mode='Markdown')
        try:
            bot.send_sticker(call.message.chat.id, sticker)
        except Exception as error_message:
            logger.exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ "end" - {0}'.format(
                                                                error_message))
            bot.send_message(call.message.chat.id, sticker)


@logger.catch
@bot.message_handler(content_types=['text'])
def process_all_messages_from_user(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ start."""
    if message.text != '/start':
        bot.send_message(chat_id=message.chat.id,
                         text='–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–∏—Ç–µ - /start')


if __name__ == '__main__':
    try:
        logger.debug('Start bot')
        bot.polling(none_stop=True, interval=0)
    except Exception as error:
        logger.exception(error)
